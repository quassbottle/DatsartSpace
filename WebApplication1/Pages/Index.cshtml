@page
@using DatsartSpace.API
@using DatsartSpace.Utils
@model IndexModel
@{
    ViewData["Title"] = "Home page";

    var generateResult = await Model.Api.Factory.GenerateAsync();
    IndexModel.GeneratedTick = generateResult.Item2;
    Model.GeneratedColors = generateResult.Item1;
    var colors = Model.GeneratedColors;

    try
    {
        Model.ColorsAvailable = await Model.Api.Colors.GetColorsAmountAsync();
    }
    catch
    {
        Model.ColorsAvailable = new Dictionary<string, int>();
    }

    var currentState = await Model.Api.Stages.GetInfoAsync();
    var colorsInfo = await Model.Api.Colors.GetColorsInfo();
}

<script>

    window.addEventListener("click", (event) => {
       if (event.target.classList.contains("pickable-color")) {
           let id = event.target.getAttribute("data-id") - 0;
           document.getElementById("colorId").value = id;
           document.getElementById("submit-pick").click();
           
           @*let data = new FormData();
           data.append("colorId", id + "");
           fetch("http://localhost:5184/", {
               method: "post",
               body: data
               }).then(response => response.text()).then(html => console.log(html));*@
       }
    });
</script>

<div class="card">
    <div class="card-header">
        Current Canvas
    </div>
    <div class="card-body">
        <img class="mx-auto d-inline" src="@currentState.SelectedImage.Url"/>
        <img class="mx-auto d-inline" src="@currentState.Canvas.Url"/>
    </div>
</div>

<div class="card">
    <div class="card-header">
        Color Factory
    </div>
    <div class="card-body text-center" id="color-factory">
        <div class="pickable-color" data-id="1" style="background: #@ColorUtils.MapInfoToHex(colors.First.Color)">@colors.First.Amount</div>
        <div class="pickable-color" data-id="2" style="background: #@ColorUtils.MapInfoToHex(colors.Second.Color)">@colors.Second.Amount</div>
        <div class="pickable-color" data-id="3" style="background: #@ColorUtils.MapInfoToHex(colors.Third.Color)">@colors.Third.Amount</div>
    </div>
    <form method="post">
        <div class="input-group mb-3">
            <input class="form-control" id="colorId" type="number" name="colorId" min="1" max="3"/>
            <button class="btn btn-outline-secondary" id="submit-pick" type="submit">Submit</button>
        </div>
    </form>
</div>

<div class="card">
    <div class="card-header">
        Colors Storage (Colors: @colorsInfo.Colors, Amount: @colorsInfo.Amount)
    </div>
    <div class="card-body text-center" data-bs-spy="scroll" data-bs-target="#color-storage">
        <div style="position: relative" id="color-storage">
        @foreach (var color in Model.ColorsAvailable.OrderByDescending(pair => pair.Value))
        {
            <div class="pickable-color" style="background: #@ColorUtils.MapInfoToHex(int.Parse(color.Key))">@color.Value</div>
        }
        </div>
    </div>
</div>

