@page
@using DatsartSpace.API
@using DatsartSpace.Utils
@using System.Drawing
@using System.Text.RegularExpressions
@model IndexModel
@{
    int dominantColorsCount = 5;
    
    ViewData["Title"] = "Home page";

    var generateResult = await Model.Api.Factory.GenerateAsync();
    IndexModel.GeneratedTick = generateResult.Item2;
    Model.GeneratedColors = generateResult.Item1;
    var generatedColors = Model.GeneratedColors;

    try
    {
        Model.ColorsAvailable = await Model.Api.Colors.GetColorsAmountAsync();
    }
    catch
    {
        Model.ColorsAvailable = new Dictionary<string, int>();
    }

    var currentState = await Model.Api.Stages.GetInfoAsync();
    var colorsInfo = await Model.Api.Colors.GetColorsInfo();

    var image = new Bitmap(await (await new HttpClient().GetAsync(currentState.SelectedImage.Url)).Content.ReadAsStreamAsync());
    
    var colors = new List<int>();
    for (int x = 0; x < image.Width; x++)
    {
        for (int y = 0; y < image.Height; y++)
        {
            var color = image.GetPixel(x, y);
            int r = color.R << 16;
            int g = color.G << 8;
            int b = color.B;
            int rgb = r + g + b;

            if (rgb != 16777215)
                colors.Add(rgb);
        }
    }
    
    var grouped = colors.GroupBy(val => val).Select(group => new
    {
        Value = group.Key,
        Count = group.Count()
    }).OrderByDescending(val => val.Count);
    var groupedArray = grouped.ToArray();
    
    Console.WriteLine();
}

<script>
    window.addEventListener("click", (event) => {
       if (event.target.classList.contains("pickable-color")) {
           let id = event.target.getAttribute("data-id") - 0;
           document.getElementById("colorId").value = id;
           document.getElementById("submit-pick").click();
           
           @*let data = new FormData();
           data.append("colorId", id + "");
           fetch("http://localhost:5184/", {
               method: "post",
               body: data
               }).then(response => response.text()).then(html => console.log(html));*@
       }
    });
</script>

<div class="card">
    <div class="card-header">
        Current Canvas
    </div>
    <div class="card-body">
        <img class="mx-auto d-inline" src="@currentState.SelectedImage.Url"/>
        <img class="mx-auto d-inline" src="@currentState.Canvas.Url"/>
    </div>
</div>

<div class="card">
    <div class="card-header">
        Canvas Dominant Colors
    </div>
    <div class="card-body text-center">
        @for (int i = 0; i < dominantColorsCount; i++)
        {
            <div class="pickable-color" style="background: #@ColorUtils.MapInfoToHex(groupedArray[i].Value)">@groupedArray[i].Value - @groupedArray[i].Count</div>
        }
    </div>
</div>

<div class="card">
    <div class="card-header">
        Color Factory
    </div>
    <div class="card-body text-center" id="color-factory">
        <div class="pickable-color" data-id="1" style="background: #@ColorUtils.MapInfoToHex(generatedColors.First.Color)">@generatedColors.First.Amount</div>
        <div class="pickable-color" data-id="2" style="background: #@ColorUtils.MapInfoToHex(generatedColors.Second.Color)">@generatedColors.Second.Amount</div>
        <div class="pickable-color" data-id="3" style="background: #@ColorUtils.MapInfoToHex(generatedColors.Third.Color)">@generatedColors.Third.Amount</div>
    </div>
    <form method="post">
        <div class="input-group mb-3">
            <input class="form-control" id="colorId" type="number" name="colorId" min="1" max="3"/>
            <button class="btn btn-outline-secondary" id="submit-pick" type="submit">Submit</button>
        </div>
    </form>
</div>

<div class="card">
    <div class="card-header">
        Colors Storage (Colors: @colorsInfo.Colors, Amount: @colorsInfo.Amount)
    </div>
    <div class="card-body text-center" data-bs-spy="scroll" data-bs-target="#color-storage">
        <div style="position: relative" id="color-storage">
        @foreach (var color in Model.ColorsAvailable.OrderByDescending(pair => pair.Value))
        {
            <div class="pickable-color" style="background: #@ColorUtils.MapInfoToHex(int.Parse(color.Key))">@color.Key - @color.Value</div>
        }
        </div>
    </div>
</div>

